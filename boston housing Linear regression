import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split, cross_val_score, ShuffleSplit
from sklearn.metrics import mean_squared_error


df = pd.read_csv(r'C:\Users\user\Desktop\housing.csv')
X = df[['RM', 'LSTAT', 'PTRATIO']]  # 독립 변수 설정
y = df['MEDV']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = LinearRegression()
model.fit(X_train, y_train)

# 초기 성능 평가
y_pred = model.predict(X_test)
initial_rmse = np.sqrt(mean_squared_error(y_test, y_pred))
print(f"{initial_rmse:.3f}")
#초기 성능 평가 결과 (RMSE): 82395.543

#Cross-validation
cv_scores = cross_val_score(model, X, y, scoring='neg_mean_squared_error', cv=5)
cv_rmse_scores = np.sqrt(-cv_scores)
print(f" RMSE {cv_rmse_scores.mean():.3f} 표준편차 {cv_rmse_scores.std():.3f}")
# RMSE: 99016.022 표준편차 24702.410


#부트스트래핑
def bootstrap_estimate(X, y, n=100):
     bootstrap_rmse_scores = []
     for _ in range(n):
         indices = np.random.randint(0, len(X), len(X))
         X_bootstrap = X.iloc[indices]
         y_bootstrap = y.iloc[indices]
         model = LinearRegression()
         model.fit(X_bootstrap, y_bootstrap)
         y_pred = model.predict(X_test)
         bootstrap_rmse = np.sqrt(mean_squared_error(y_test, y_pred))
         bootstrap_rmse_scores.append(bootstrap_rmse)
     bootstrap_rmse_scores = np.array(bootstrap_rmse_scores)
     bootstrap_rmse_mean = bootstrap_rmse_scores.mean()
     bootstrap_rmse_std = bootstrap_rmse_scores.std()

bootstrap_estimate(X_train, y_train)
# RMSE 82931.314
# 표준편차 1299.364


